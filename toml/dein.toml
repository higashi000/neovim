[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'simeji/winresizer'
# hook_add {{{
hook_add = '''
let g:winresizer_start_key = '<C-T>'
'''
# }}}

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'osyo-manga/vim-over'
# hook_add {{{
hook_add = '''
" over.vimの起動
nnoremap <silent> <Leader>m :OverCommandLine<CR>

" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>

"コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''
#}}}


#カッコ補完
[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

#Tree表示
[[plugins]]
repo = 'scrooloose/nerdtree'
# hook_add {{{
hook_add = '''
    let g:NERDTreeDirArrow = 1
    let g:NERDTreeDirArrowExpandable = '→'
    let g:NERDTreeDirArrowCollapsible = '↓'
    nnoremap <silent> <C-n> :NERDTreeToggle<CR>
'''
#}}}

#toml　syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

#deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
# hook_add {{{
hook_add = '''
    source ~/.config/nvim/toml/deoplete.rc.vim
    "let g:deoplete#enable_at_startup = 1
    "let g:deoplete#enable_at_smartcase = 1
    "let g:deoplete#enable_camel_case = 1
    " let g:deoplete#auto_complete_delay = 1
    "let g:deoplete#auto_complete_start_length = 1
'''
# }}}

[[plugins]]
repo = 'Shougo/deoplete-clangx'
on_i = 1
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_i = 1

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'itchyny/lightline.vim'


[[plugins]]
repo = 'mattn/sonictemplate-vim'
# on_i = 1
#sonictemplate---{{{
hook_add = '''
let g:sonictemplate_vim_template_dir = [
    \'~/.config/nvim/template'
    \]

'''

#}}}

[[plugins]]
repo = 'w0rp/ale'
# hook_add---{{{
hook_add = '''
" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストとQuickFixには表示しない
" 出てると結構うざいしQuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 有効にするlinter
let g:ale_linters = {
\   'python': ['flake8'],
\}

" ALE用プレフィックス
nmap [ale] <Nop>
map <C-k> [ale]
" エラー行にジャンプ
nmap <silent> [ale]<C-P> <Plug>(ale_previous)
nmap <silent> [ale]<C-N> <Plug>(ale_next)'''
# }}}

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
#hook_add---{{{
hook_add = '''
let g:auto_save = 1
'''
#---}}}
